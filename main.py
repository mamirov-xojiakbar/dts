import asyncio
import asyncpg
from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.utils.keyboard import InlineKeyboardBuilder, ReplyKeyboardBuilder

# Database configuration
DB_CONFIG = {
    'user': 'abubakiir7',
    'password': 'abubakiir7',
    'database': 'db',
    'host': '127.0.0.1'
}

# Bot configuration
CHANNELS = [
    ('https://t.me/downtown_cases', '@downtown_cases'),
    ('https://t.me/downtown_goyard', '@downtown_goyard'),
    ('https://t.me/downtownshop_uz', '@downtownshop_uz'),
    ('https://t.me/dts_samsung', '@dts_samsung')
]
BOT_TOKEN = '6365410542:AAE9c1KsA4hg7IJEc8eRr1wvEKvlhqPV8Ns'
CHAT_ID = '@downtown_cases'

class Database:
    def __init__(self):
        self.pool = None

    async def connect(self):
        """Establish a database connection pool."""
        if self.pool is None:
            self.pool = await asyncpg.create_pool(**DB_CONFIG)

    async def close(self):
        """Close the database connection pool."""
        await self.connect()
        if self.pool is not None:
            await self.pool.close()
            self.pool = None

    async def add_user(self, username, referral_code, contact):
        """Add a user to the database. If the username already exists, do nothing."""
        await self.connect()
        async with self.pool.acquire() as conn:
            await conn.execute(
                '''
                INSERT INTO users (username, referral_code, invited_count, contact) 
                VALUES ($1, $2, $3, $4) 
                ON CONFLICT (username) DO NOTHING
                ''',
                username, referral_code, 0, contact
            )

    async def update_invited_count(self, referrer_id):
        """Update the invited count for a given user."""
        await self.connect()
        async with self.pool.acquire() as conn:
            # First, get the current invited count
            current_count = await conn.fetchval(
                'SELECT invited_count FROM users WHERE id = $1',
                referrer_id
            )
            
            # You can add your logic here to check the count if needed
            # For example, you might want to do something if the count is already a certain number
            
            # If you want to update the count, you can specify your logic here.
            new_count = current_count + 1  # Incrementing by 1 as an example
            await conn.execute(
                'UPDATE users SET invited_count = $1 WHERE id = $2',
                new_count, referrer_id
            )

    async def invites(self, referrer_id, username):
        await self.connect()  # Await the connection
        async with self.pool.acquire() as conn:
            # Check if the username already exists in the invites table
            existing_invite = await conn.fetchval(
                'SELECT username FROM invites WHERE username = $1 AND referrer_id = $2',
                username, referrer_id
            )
            
            if existing_invite is not None:
                # Handle the case where the username already exists
                print(f"Invite for username '{username}' already exists.")
                return  # Or raise an exception, or do whatever is appropriate
            
            # If the username does not exist, proceed with the insert
            await conn.execute(
                '''INSERT INTO invites (username, referrer_id)
                VALUES ($1, $2)''',
                username, referrer_id
            )
            
            # After inserting, update the invited count
            await self.update_invited_count(referrer_id)

    async def add_referral(self, referrer_id, invitee_username):
        """Add a referral entry to the database."""
        await self.connect()
        async with self.pool.acquire() as conn:
            await conn.execute(
                'INSERT INTO referrals (referrer_id, invitee_username) VALUES ($1, $2)',
                referrer_id, invitee_username
            )

    async def get_user_by_referral_code(self, referral_code):
        """Retrieve a user ID by referral code."""
        await self.connect()
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                'SELECT id FROM users WHERE referral_code = $1',
                referral_code
            )

    async def get_user_by_username(self, username):
        """Retrieve a user ID and invited count by username."""
        await self.connect()
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                'SELECT id, invited_count FROM users WHERE username = $1',
                username
            )

    async def get_invite_info(self, invite_link):
        """Retrieve the referrer ID for a given invite link."""
        await self.connect()
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                '''
                SELECT referrer_id 
                FROM invite_links 
                WHERE invite_link = $1
                ''',
                invite_link
            )  
        
    async def get_possible_referrer(self, invite_link):
        """Retrieve the referrer ID by invite link."""
        await self.connect()
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                '''
                SELECT referrer_id 
                FROM invite_links 
                WHERE invite_link = $1
                ''',
                invite_link
            )

    async def get_recent_referrer(self):
        """Retrieve the most recent invite link and its referrer from the database."""
        await self.connect()
        async with self.pool.acquire() as conn:
            return await conn.fetchrow(
                '''
                SELECT referrer_id FROM referrals
                ORDER BY created_at DESC LIMIT 1
                '''
            )
    
    async def get_user_rank_context(self, target_username):
        """Retrieve users ranked above and below a specific user, including the target user."""
        await self.connect()
        async with self.pool.acquire() as conn:
            # Fetch the rank and details of the target user
            target_user = await conn.fetchrow(
                '''
                WITH RankedUsers AS (
                    SELECT id, username, invited_count AS points,
                        ROW_NUMBER() OVER (ORDER BY invited_count DESC) AS rank
                    FROM users
                )
                SELECT id, username, points, rank
                FROM RankedUsers
                WHERE username = $1  -- The specific user to check
                ''',
                target_username  # Pass the target username as a parameter
            )

            # Check if the target user exists
            if target_user is None:
                print(f"User '{target_username}' not found.")
                return []  # Return an empty list or handle as needed

            # Fetch users ranked above the target user (limit to 5)
            users_above = await conn.fetch(
                '''
                WITH RankedUsers AS (
                    SELECT id, username, invited_count AS points,
                        ROW_NUMBER() OVER (ORDER BY invited_count DESC) AS rank
                    FROM users
                )
                SELECT id, username, points, rank
                FROM RankedUsers
                WHERE rank < (SELECT rank FROM RankedUsers WHERE username = $1)  -- Users above the target
                ORDER BY rank DESC
                LIMIT 5;
                ''',
                target_username  # Use the target username for the subquery
            )

            # Fetch users ranked below the target user (limit to 5)
            users_below = await conn.fetch(
                '''
                WITH RankedUsers AS (
                    SELECT id, username, invited_count AS points,
                        ROW_NUMBER() OVER (ORDER BY invited_count DESC) AS rank
                    FROM users
                )
                SELECT id, username, points, rank
                FROM RankedUsers
                WHERE rank > (SELECT rank FROM RankedUsers WHERE username = $1)  -- Users below the target
                ORDER BY rank ASC
                LIMIT 5;
                ''',
                target_username  # Use the target username for the subquery
            )

            # Return the target user along with users above and below
            return {
                "target": target_user,
                "above": users_above,
                "below": users_below
            }

class ReferralBot:
    def __init__(self, token):
        self.bot = Bot(token=token)
        self.dp = Dispatcher()
        self.db = Database()  # Initialize the database

    async def on_startup(self):
        await self.db.connect()

    async def on_shutdown(self):
        await self.db.close()

    def accpet_privacy_policy_keyboard(self): 
        keyboard = InlineKeyboardBuilder()
        keyboard.button(text='–Ø –ø—Ä–∏–Ω–∏–º–∞—é', callback_data='accepted')
        keyboard.adjust(1)

        return keyboard.as_markup()

    def main_menu(self): 
        keyboard = ReplyKeyboardBuilder()
        for i in ['–ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª', '–ú–æ–∏ –±–∞–ª–ª—ã', '–ú–æ–π —É—Ä–æ–≤–µ–Ω—å', '–ì–∏–¥', '–Ø–∑—ã–∫']:
            keyboard.button(text=i)
        keyboard.adjust(1, 2, 2)

        return keyboard.as_markup(resize_keyboard=True)

    async def privacy_policy_command(self, message: types.Message):
        await message.answer(text=f'''üéâ –†–æ–∑—ã–≥—Ä—ã—à —Å 10 –ø—Ä–∏–∑–æ–≤—ã–º–∏ –º–µ—Å—Ç–∞–º–∏! üéâ

–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ–º –≤—Å–µ—Ö –Ω–∞—à–∏—Ö –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! –ú—ã –∑–∞–ø—É—Å–∫–∞–µ–º —Ä–æ–∑—ã–≥—Ä—ã—à, –≤ –∫–æ—Ç–æ—Ä–æ–º —É –≤–∞—Å –µ—Å—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ 10 –ø—Ä–∏–∑–æ–≤!

üèÜ –ö–∞–∫ —É—á–∞—Å—Ç–≤–æ–≤–∞—Ç—å?

 1. –°–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ–∏–Ω—Ç—ã –∑–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ –Ω–∞—à–µ–º –∫–∞–Ω–∞–ª–µ.
 2. –ü–µ—Ä–≤—ã–µ 10 —á–µ–ª–æ–≤–µ–∫ —Å –Ω–∞–∏–±–æ–ª—å—à–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –ø–æ–∏–Ω—Ç–æ–≤ –∫ –∫–æ–Ω—Ü—É –º–µ—Å—è—Ü–∞ —Å—Ç–∞–Ω—É—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è–º–∏!

üìÖ –°—Ä–æ–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:

 ‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–¥–ª–∏—Ç—Å—è 1 –º–µ—Å—è—Ü.

üí° –ö–∞–∫ –∑–∞—Ä–∞–±–æ—Ç–∞—Ç—å –ø–æ–∏–Ω—Ç—ã?

 ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à–∞–π—Ç–µ –¥—Ä—É–∑–µ–π –≤ –Ω–∞—à –∫–∞–Ω–∞–ª. –î–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–π –¥—Ä—É–≥ –≤—ã–π–¥–µ—Ç, –≤—ã –≤—Å—ë —Ä–∞–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å —Å–≤–æ–∏ –ø–æ–∏–Ω—Ç—ã.

üîê –í–∞–∂–Ω—ã–µ —É—Å–ª–æ–≤–∏—è:

 ‚Ä¢ –ü—Ä–∏–≥–ª–∞—à—ë–Ω–Ω—ã–µ –¥—Ä—É–∑—å—è –¥–æ–ª–∂–Ω—ã –æ—Å—Ç–∞–≤–∞—Ç—å—Å—è –≤ –∫–∞–Ω–∞–ª–µ –¥–æ –∫–æ–Ω—Ü–∞ —Ä–æ–∑—ã–≥—Ä—ã—à–∞. –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –±—É–¥–µ—Ç –≤—ã—Ö–æ–¥–∏—Ç—å –∏ –∑–∞—Ö–æ–¥–∏—Ç—å –æ–±—Ä–∞—Ç–Ω–æ, —Ç–∞–∫–∏–µ –¥–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ.
 ‚Ä¢ –õ—é–±—ã–µ –ø–æ–ø—ã—Ç–∫–∏ –æ–±–º–∞–Ω–∞ —Ç–∞–∫–∂–µ –ø—Ä–∏–≤–µ–¥—É—Ç –∫ –±–∞–Ω—É.

üì≤ –£—á–∞—Å—Ç–≤—É–π—Ç–µ, –∑–∞—Ä–∞–±–∞—Ç—ã–≤–∞–π—Ç–µ –ø–æ–∏–Ω—Ç—ã –∏ —É–¥–∞—á–∏ –≤ —Ä–æ–∑—ã–≥—Ä—ã—à–µ!''', reply_markup=self.accpet_privacy_policy_keyboard())
    
    async def handle_privacy_acceptance(self, callback: types.CallbackQuery):
        await callback.message.answer("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ —Å–æ–≥–ª–∞—Å–∏–µ —Å –Ω–∞—à–µ–π –ø–æ–ª–∏—Ç–∏–∫–æ–π –∫–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.", reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –º–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞", request_contact=True)]
            ],
            one_time_keyboard=True,
            resize_keyboard=True
        ))

    async def handle_contact(self, message: types.Message):
        if message.contact:
            phone_number = message.contact.phone_number
            username = message.from_user.username or str(message.from_user.id)  # Fallback if username is None
            referral_code = f'referral_{message.from_user.id}'  # Example referral code

            # Store user information, including the phone number and referral code
            await self.db.add_user(username, referral_code, phone_number)
            await message.answer(f"–°–ø–∞—Å–∏–±–æ! –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã.", reply_markup=self.main_menu())
        else:
            await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É.")

    async def check_sub(self, message) -> InlineKeyboardBuilder:
            c = 0
            keyboard = InlineKeyboardBuilder()
            for i in CHANNELS:
                chat_member = await self.bot.get_chat_member(i[1], message.from_user.id)
                if chat_member.status not in ['member', 'administrator', 'creator']:
                    keyboard.button(text='Subscribe', url=i[0])
                    c += 1
            keyboard.button(text='Confirm', callback_data='confirm')
            keyboard.adjust(*[1 for _ in range(len(CHANNELS) + 1)])
            return [keyboard.as_markup(), c]
    
    async def confirm(self, callback: types.CallbackQuery) -> None:
        keyboard, c = await self.check_sub(callback)
        print(c)
        if c:
            await callback.answer(
                text='Subscribe',
            )
            return
        await self.start_command(message=callback.message)
        await self.bot.delete_message(chat_id=callback.message.chat.id, message_id=callback.message.message_id)


    async def start_command(self, message: types.Message):
        keyboard, c = await self.check_sub(message)
        if c:
            await message.answer(
                text='–ë—É–¥—å—Ç–µ –≤ —á–∏—Å–ª–µ –ø–µ—Ä–≤—ã—Ö –≥—Ä—É–ø–ø, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—à–µ–≥–æ –±–æ—Ç–∞',
                reply_markup=keyboard
            )
            return
        username = message.from_user.username or str(message.from_user.id)  # Fallback if username is None
        referral_code = f'referral_{message.from_user.id}'  # Example referral code
        if not await self.db.get_user_by_username(username):
            await self.privacy_policy_command(message)
            return
        await message.answer(f'–¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –¥–æ–±—ã–≤–∞—Ç—å —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–µ points.', reply_markup=self.main_menu())

    async def invite_command(self, message: types.Message):
        try:
            member = await self.bot.get_chat_member(CHAT_ID, self.bot.id)
            if member.status != 'administrator':
                await message.answer("The bot does not have sufficient permissions to create invite links.")
                return

            # Create the invite link and store it in the database
            link = await self.bot.create_chat_invite_link(chat_id=CHAT_ID, name=f"Invite {message.from_user.username}")
            
            # Save the referrer and the invite link in the database
            user = await self.db.get_user_by_username(message.from_user.username)
            if user:
                referrer_id = user['id']
                await self.db.add_referral(referrer_id, link.invite_link)  # Save the referrer and the invite link

            await message.answer(f'–í–æ—Ç –≤–∞—à–∞ –ø—Ä–∏–≥–ª–∞—Å–∏—Ç–µ–ª—å–Ω–∞—è —Å—Å—ã–ª–∫–∞: {link.invite_link}')

        except Exception as e:
            await message.answer("An error occurred while trying to create the invite link.")
            print(f"Error creating invite link: {e}")

    async def track_invite(self, update: types.ChatMemberUpdated):
        if update.new_chat_member.status == "member":  # User has joined the chat
            user = update.new_chat_member.user  # Get the user who joined

            # Check if the user already exists in the database
            existing_user = await self.db.get_user_by_username(user.username)

            # Now attempt to associate this user with a referrer by using the most recent invite link
            # Get the most recent invite link from your `referrals` table
            referrer_info = await self.db.get_recent_referrer()  # Implement this method to fetch the most recent invite link

            if referrer_info:
                referrer_id = referrer_info['referrer_id']
                await self.db.invites(referrer_id=referrer_id, username=user.username)
                print(f"User {user.username} joined via referral ID: {referrer_id}")
            else:
                print(f"User {user.username} joined without a referral.")

    async def count_my_point(self, message: types.Message):
        username = message.from_user.username or str(message.from_user.id)  # Fallback if no username

        # Fetch the user and the invited_count from the database
        user_info = await self.db.get_user_by_username(username)

        if user_info:
            invited_count = user_info['invited_count']
            await message.answer(text=f'''‚ú® <b>–í–∞—à–∏ –±–∞–ª–ª—ã</b> ‚ú®

–ü—Ä–∏–≤–µ—Ç! 

–¢—ã –Ω–∞ –ø—É—Ç–∏ –∫ –ø–æ–±–µ–¥–µ! 

–ó–¥–µ—Å—å —Ç—ã –º–æ–∂–µ—à—å –æ—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å–≤–æ–∏ –±–∞–ª–ª—ã –∏ –≤–∏–¥–µ—Ç—å, –∫–∞–∫ —Ç—ã –ø—Ä–∏–±–ª–∏–∂–∞–µ—à—å—Å—è –∫ –ø—Ä–∏–∑–æ–≤—ã–º –º–µ—Å—Ç–∞–º.

 –°–æ–±–∏—Ä–∞–π –∫–∞–∫ –º–æ–∂–Ω–æ –±–æ–ª—å—à–µ –±–∞–ª–ª–æ–≤ –∏ –ø–æ–ª—É—á–∏ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É—Ç—ã–µ –ø—Ä–∏–∑—ã!

üíº <b>–¢–≤–æ–∏ —Ç–µ–∫—É—â–∏–µ –±–∞–ª–ª—ã:</b> {invited_count}

üéØ <b>–¶–µ–ª—å:</b> –í–æ–π—Ç–∏ –≤ —Ç–æ–ø-10 –∏ –≤—ã–∏–≥—Ä–∞—Ç—å –æ–¥–∏–Ω –∏–∑ –≥–ª–∞–≤–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤! 

–ù–µ –∑–∞–±—ã–≤–∞–π, —á—Ç–æ –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∞–±–µ—Ä—ë—à—å <b>–±–æ–ª—å—à–µ 250</b> –±–∞–ª–ª–æ–≤, —Ç—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω–æ –ø–æ–ª—É—á–∏—à—å <b>–∫—É–ø–æ–Ω –Ω–∞ 50 000 —Å—É–º.</b>''', parse_mode='html')
        else:
            await message.answer("–í—ã –µ—â–µ –Ω–µ –ø—Ä–∏–≥–ª–∞—Å–∏–ª–∏ –Ω–∏ –æ–¥–Ω–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞ –∏–ª–∏ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ.")

    async def rank(self, message: types.Message):
        username = message.from_user.username or str(message.from_user.id)

        rank_data = await self.db.get_user_rank_context(username)

        if rank_data:
            target_user = rank_data.get("target")
            users_above = rank_data.get("above", [])
            users_below = rank_data.get("below", [])

            # Construct the response message using HTML formatting
            response = []

            # Add target user information
            response.append(f"üìä <b>–í–∞—à —Ç–µ–∫—É—â–∏–π —Ä–µ–π—Ç–∏–Ω–≥</b> @{self.escape_html(target_user['username'])}:")
            response.append(f" <b>‚Ä¢ –ë–∞–ª–ª—ã</b>: {int(target_user['points'])*5}\n <b>‚Ä¢ –£—Ä–æ–≤–µ–Ω—å</b>: {target_user['rank']}")

            # Add users above
            response.append("<b>üîù –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –≤—ã—à–µ –≤–∞—Å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b>")
            if users_above:
                i = 1
                for user in users_above:
                    response.append(f"@{self.escape_html(user['username'])} - Points: {int(user['points'])*5}, –£—Ä–æ–≤–µ–Ω—å: {user['rank']}")
                    i+=1
            else:
                response.append("üî∫ <b>–ù–∏ –æ–¥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–º–µ–µ—Ç —Ä–µ–π—Ç–∏–Ω–≥–∞ –≤—ã—à–µ –≤–∞—à–µ–≥–æ.</b>")

            # Add users below
            response.append("<b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –Ω–∞—Ö–æ–¥—è—â–∏–µ—Å—è –Ω–∏–∂–µ –≤–∞—Å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b>")
            if users_below:
                i = 1
                for user in users_below:
                    response.append(f"@{self.escape_html(user['username'])} - Points: {int(user['points'])*5}, –£—Ä–æ–≤–µ–Ω—å: {user['rank']}")
                    i+=1
            else:
                response.append("üîª <b>–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–∏–∂–µ –≤–∞—Å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ:</b>")
            

            response.append("–ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞—Ç—å –±–∞–ª–ª—ã –∏ –ø–æ–¥–Ω–∏–º–∞–π—Ç–µ—Å—å –≤ —Ä–µ–π—Ç–∏–Ω–≥–µ!")

            # Join the response list into a single message
            final_response = "\n\n".join(response)

            # Send the response back to the user
            await message.answer(final_response, parse_mode="HTML")  # Use HTML for formatting
        else:
            await message.answer("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É –≤–∞—Å –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –µ–≥–æ —Ä–µ–π—Ç–∏–Ω–≥–µ.")

    def escape_html(self, text):
        """Escape special characters in HTML."""
        html_escape_table = {
            "&": "&amp;",
            '"': "&quot;",
            "'": "&#x27;",
            ">": "&gt;",
            "<": "&lt;",
            " ": "&nbsp;"
        }
        return ''.join(html_escape_table.get(c, c) for c in text)
    
    async def guide(self, message: types.Message):
        await message.answer(f'''üéâ –ë–æ–ª—å—à–æ–π —Ä–æ–∑—ã–≥—Ä—ã—à —Å 10 –ø—Ä–∏–∑–æ–≤—ã–º–∏ –º–µ—Å—Ç–∞–º–∏! üéâ

–î–æ—Ä–æ–≥–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∏, –º—ã –∑–∞–ø—É—Å–∫–∞–µ–º –≥—Ä–∞–Ω–¥–∏–æ–∑–Ω—ã–π —Ä–æ–∑—ã–≥—Ä—ã—à, –≤ –∫–æ—Ç–æ—Ä–æ–º –±—É–¥–µ—Ç 10 –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç! –£ –∫–∞–∂–¥–æ–≥–æ –µ—Å—Ç—å —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –æ—Ç–ª–∏—á–Ω—ã–µ –ø—Ä–∏–∑—ã!

üèÜ –ü—Ä–∏–∑–æ–≤—ã–µ –º–µ—Å—Ç–∞:

 1 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 3 000 000 —Å—É–º –∏ Telegram Premium
 2 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 2 000 000 —Å—É–º –∏ Telegram Premium
 3 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 1 000 000 —Å—É–º –∏ Telegram Premium
 4 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 500 000 —Å—É–º –∏ Telegram Premium
 5 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 400 000 —Å—É–º –∏ Telegram Premium
 6 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 300 000 —Å—É–º –∏ Telegram Premium
 7 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 200 000 —Å—É–º –∏ Telegram Premium
 8 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 100 000 —Å—É–º –∏ Telegram Premium
 9 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 100 000 —Å—É–º –∏ Telegram Premium
 10 –º–µ—Å—Ç–æ ‚Äî –∫—É–ø–æ–Ω –Ω–∞ 100 000 —Å—É–º –∏ Telegram Premium

üí° –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –±–æ–Ω—É—Å:

 –í—Å–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏, –∫—Ç–æ –Ω–∞–±–µ—Ä—ë—Ç –±–æ–ª–µ–µ 250 –ø–æ–∏–Ω—Ç–æ–≤, –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ª—É—á–∞—Ç –∫—É–ø–æ–Ω –Ω–∞ 50 000 —Å—É–º, –≤–Ω–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø—Ä–∏–∑–æ–≤—ã—Ö –º–µ—Å—Ç. –ë–µ–∑ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö ‚Äî –∫–∞–∂–¥—ã–π –ø–æ–ª—É—á–∏—Ç —Å–≤–æ–π –±–æ–Ω—É—Å!


üì≤ –ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—É–ø–æ–Ω—ã?

–≠—Ç–∏ –∫—É–ø–æ–Ω—ã –º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –≤ –Ω–∞—à–∏—Ö —Å–æ–æ–±—â–µ—Å—Ç–≤–∞—Ö, —Ç–∞–∫–∏—Ö –∫–∞–∫
DTS ‚Ä¢ Cases, 
DTS ‚Ä¢ Clothes, 
DTS ‚Ä¢ Goyard, 
–∏ DTS ‚Ä¢ Samsung.

üìÖ –°—Ä–æ–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:

 ‚Ä¢ –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–¥–ª–∏—Ç—Å—è 1 –º–µ—Å—è—Ü.

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã! –£—á–∞—Å—Ç–≤—É–π—Ç–µ, —Å–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ–∏–Ω—Ç—ã –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!

üìÖ –°—Ä–æ–∫–∏ —Ä–æ–∑—ã–≥—Ä—ã—à–∞:

 –†–æ–∑—ã–≥—Ä—ã—à –ø—Ä–æ–¥–ª–∏—Ç—Å—è 1 –º–µ—Å—è—Ü.

–ù–µ —É–ø—É—Å—Ç–∏—Ç–µ —à–∞–Ω—Å –≤—ã–∏–≥—Ä–∞—Ç—å –∫—Ä—É–ø–Ω—ã–µ –ø—Ä–∏–∑—ã –∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –±–æ–Ω—É—Å—ã! –£—á–∞—Å—Ç–≤—É–π—Ç–µ, —Å–æ–±–∏—Ä–∞–π—Ç–µ –ø–æ–∏–Ω—Ç—ã –∏ –ø–æ–±–µ–∂–¥–∞–π—Ç–µ!''')

    def register(self) -> None:
        self.dp.message.register(self.start_command, Command("start"))
        self.dp.callback_query.register(self.confirm, F.data == "confirm")
        self.dp.message.register(self.invite_command, F.text == '–ú–æ–π —Ä–µ—Ñ–µ—Ä–∞–ª')
        self.dp.message.register(self.count_my_point, F.text == '–ú–æ–∏ –±–∞–ª–ª—ã')
        self.dp.message.register(self.rank, F.text == '–ú–æ–π —É—Ä–æ–≤–µ–Ω—å')
        self.dp.message.register(self.guide, F.text == '–ì–∏–¥')
        self.dp.callback_query.register(self.handle_privacy_acceptance, F.data == 'accepted')
        self.dp.message.register(self.handle_contact, F.contact)
        self.dp.chat_member.register(self.track_invite)

    async def start_bot(self) -> None:
        self.register()
        try:
            await self.dp.start_polling(self.bot)
        except Exception as e:
            print(f"Error in polling: {e}")
            await self.bot.session.close()

if __name__ == '__main__':
    asyncio.run(ReferralBot(token=BOT_TOKEN).start_bot())